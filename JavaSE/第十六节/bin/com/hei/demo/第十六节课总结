一、流的类型
FileInputStream类和FileOutputStream类是成对出现的，一个进行输入（读文件）操作，一个进行输出（写文件）操作；
由于采用字节方式进行数据传输，不必考虑数据的格式问题，这两个类对文件操作的效率较高；
可以使用这两个类完成复制文件的操作。

二、应用领域与作用
输入inputStream、输出流outputStream，以1byte的方式去读或写入  byte[]
字节流 stream：用于进行文件的复制粘贴和处理二进制数据----》如：图片/视频、音频
字符流： 用于操作文本文件的内容，例如添加删除修改里面的内容。---->如：（txt/java/jsp/xml）
以2个byte的单位进行读取和写入    ----》char[]
缓冲流：让你读写更高效 	

三、Stream流
FileInputStream类称为文件输入流，继承于InputStream类，是进行文件读操作的最基本类；
它的作用是将文件中的数据输入到内存中，我们可以利用它来读文件；
由于它属于字节流，因此在读取Unicode字符（如中文）的文件时可能会出现问题。

四、FileInputStream构造方法和常用方法以及注意点
FileInputStream类称为文件输入流，继承于InputStream类，是进行文件读操作的最基本类；
它的作用是将文件中的数据输入到内存中，我们可以利用它来读文件；
由于它属于字节流，因此在读取Unicode字符（如中文）的文件时可能会出现问题。
构造方法1：
1.new FileInputStream(File file) throws FileNotFoundException	使用File对象创建文件输入流对象，如果文件打开失败，将抛出异常
常用方法：
2.int read() throws IOException 读取文件中的数据，一次读取一个字节，读取的数据作为返回值返回，如果读到文件末尾则返回-1，有可能抛异常，必须捕捉
3.int read(byte[] b) throws IOException 读取文件中的数据，将读到的数据存放到byte型数组中，并返回读取的字节的数量，未读到数据返回-1，有可能抛异常，必须捕捉
4.void close() throws IOException	关闭流对象，有可能抛异常，必须捕捉（一般放在finally代码块中进行关闭流对象）
5.new DecimalFormat(String pattern)传入一定的格式，调用format(double d)将d数字四舍五入转换成字符串形式输出

注意1：当读取的文件字节数超出该数组的长度时，则内部会自动创建一个相同长度的新数组来装完文件中的剩余的字节数据
创建一个byte数组
byte[] ba = new byte[7];
注意2：如果读取到最后一个数组的时候，字节数不够填满数组，则会从已经读取完的字节之前取够填满数组长度的字节数
如：按7个字节读取数据heiyouyouhei，第一次输出len=7，转换成字符串值为heiyouy；第二次输出5，转换成字符串值为ouheiuy
new String(byte b)将字节数组以字符串的形式输出

五、FileOutputStream构造方法以及常用方法
FileOutputStream类称为文件输出流，继承于OutputStream类，是进行文件写操作的最基本类；
它的作用是将内存中的数据输出到文件中，我们可以利用它来写文件。
构造方法1：
FileOutputStream(File file) throws FileNotFoundException 使用File对象创建文件输出流对象，如果文件打开失败，将抛出异常
注意：如果文件路径在磁盘中不存在，FileOutputStream则会自动创建改路径和文件
FileOutputStream output = new FileOutputStream(file);
构造方法2：
FileOutputStream(File file, boolean append)throws FileNotFoundException	使用File对象创建文件输出流对象，并由参数append指定是否追加文件内容，true为追加，false为不追加，默认为不追加，异常情况同上
FileOutputStream output = new FileOutputStream(file,true);  
构造方法3：
FileOutputStream(String name) throws FileNotFoundException 直接使用文件名或路径创建文件输出流对象，异常情况同上
FileOutputStream output = new FileOutputStream("E:/潭州学院/java中级班作业和练习/Jery老师JavaSe班/jery老师javase班练习/第十六节/src/com/hei/text/t.txt"); 			
构造方法4：
FileOutputStream(String name, boolean append) throws FileNotFoundException 直接使用文件名或路径创建文件输出流对象，并由参数append指定是否追加，异常情况同上
FileOutputStream output = new FileOutputStream("E:/潭州学院/java中级班作业和练习/Jery老师JavaSe班/jery老师javase班练习/第十六节/src/com/hei/text/t.txt",true); 			
常用方法：
1.void write(int b) throws IOException 往文件中写数据，一次写一个字节，有可能抛异常，必须捕捉
output.write(97);//将int类型的值按ASCII码自动转成对应的字符：a
2.void write(byte[] b) throws IOException 往文件中写数据，将byte数组中的数据全部写入到文件中，有可能抛异常，必须捕捉
注意：写入中文的字节数组是不会出现乱码的，因为在内存中已经将中文字符转成了字节一次性装入了字节数组
output.write(bt);
3.write(byte[] e,int startoff,int count)传入一个字节数组，从startoff位置开始写入count个字节进文件
4.void close() throws IOException 关闭流对象，有可能抛异常，必须捕捉

六、字符流
FileInputStream类和FileOutputStream类虽然可以高效率地读/写文件，但对于Unicode编码的文件，使用它们有可能出现乱码；
考虑到Java是跨平台的语言，要经常操作Unicode编码的文件，使用字符流操作文件是有必要的；
使用字符流将涉及到以下4个类：
FileReader类和FileWriter类；
BufferedReader类和BufferedWriter类。

七、FileReader类常用构造函数、方法和缓冲读取流BufferedReader
FileReader类称为文件读取流，允许以字符流的形式对文件进行读操作
构造方法1：
FileReader(File file) throws FileNotFoundException 使用File对象创建文件读取流对象，如果文件打开失败，将抛出异常
构造方法2：
FileReader(String name) throws FileNotFoundException 使用文件名或路径创建文件读取流对象，如果文件打开失败，将抛出异常
该类将从文件中逐个地读取字符，效率比较低下，因此一般将该类对象包装到缓冲流中进行操作。
BufferedReader类主要为字符流提供缓冲，以提高效率。
构造方法1：
BufferedReader(Reader in) 将字符读取流对象包装成缓冲读取流对象
常用方法1：
String readLine()throws IOException	从缓冲读取流中读取一行字符，以字符串的形式返回，读到末尾返回null，有可能抛异常，必须捕捉
void close() throws IOException	关闭流对象，有可能抛异常，必须捕捉

八、FileWriter类常用构造函数、方法和缓冲写入流BufferedWriter
FileWriter类称为文件写入流，以字符流的形式对文件进行写操作
构造方法1：
FileWriter(File file) throws IOException 使用File对象创建文件写入流对象，如果文件打开失败，将抛出异常，必须捕捉
构造方法2：
FileWriter(File file, boolean append) throws IOException 使用File对象创建文件写入流对象，并由参数append指定是否追加，异常情况同上
构造方法3：
FileWriter(String name) throws IOException 直接使用文件名或路径创建文件写入流对象，异常情况同上
构造方法4：
FileWriter(String name, boolean append) throws IOException直接使用文件名或路径创建文件写入流对象，并由参数append指定是否追加，异常情况同上
与FileReader类相似，FileWriter类同样需要使用缓冲流进行包装。
BufferedWriter类可以为FileWriter类提供缓冲:
构造方法1：
BufferedWriter(Writer out) 将字符写入流对象包装成缓冲写入流对象
常用方法1：
void write(String str) throws IOException 将一行字符串写入到缓冲写入流中，有可能抛异常，必须捕捉
常用方法2：
void newLine() throws IOException 将一个回车换行符写入到文件中，从而达到换行的效果，有可能抛异常，必须捕捉
常用方法3：
注意：当没有关闭流时，可以使用flush()强制刷新数据写入指定文件中，但是有时不写也可以，只要源文件的大小超过了缓冲写入流8k缓存区，就会自动写入目标文件中
而且只有字符缓冲写入流有这个方法
bufferedWriter.flush(); 
一定注意：先开启的流最后面再关闭，后面开启的流最先关闭；还有如果流不关闭，就无法写入数据到指定文件中去，除非强制使用flush()刷新写入文件中

九、System.in从控制台接受输入
System.in的read方法可以从控制台接受输入；
但由于in实际上是一个InputStream类的对象，它只能以字节形式接收数据，并且一次只能接受一个字节，这使输入操作很不便；
必须将System.in进行处理，才可以顺利地从控制台接受输入，这将使用到：
InputStreamReader类
BufferedReader类
十、InputStreamReader类
InputStreamReader类用于将InputStream类型的字节输入流对象转换成Reader类型的字符读取流对象；
构造函数1：
InputStreamReader(InputStream in) 将InputStream对象转换成Reader对象
可以使用它来转换System.in，如：
	InputStreamReader isr = new InputStreamReader(System.in);
这样的字符流效率很低，再使用BufferedReader类来为其建立缓冲，如：
	BufferedReader br = new BufferedReader(isr);
这样，就可以从控制台接受输入了。

十一、Properties类
该类是位于util包里的一个工具类，与IO的结合能十分有效地读写文件，特别在准确快速读取方面效率十分高！
该类结合了util包里的HashMap的存储方法，使用了键值对方式
常用方法：
1、void load(InputStream in)通过字节流加载一个文件
2、void load(Reader reader)通过字符流加载一个文件
3、String getProperty(String key) 通过键获得文件中对应的值，找不到返回null
4、Object setProperty(String key,String value)	存入一对键值对
5、boolean containsKey(String key)配置文件对象是否包含某个键
6、boolean containsValue(String value)配置文件对象是否包含某个值

十二、DataInputStream类
DataInputStream类可以输入任何类型的数据，但它不可以单独使用，需要要配合其它字节输入流一起使用；
DataInputStream类的构造方法只有一种方式：
DataInputStream(InputStream in)	利用其它的字节输入流创建数据输入流对象
//将文件输入流包装成数据输入流，以便从文件中读取各种类型的数据
FileInputStream fis = new FileInputStream("data.dat");
DataInputStream dis = new DataInputStream(fis);

2、DataInputStream类的常用方法
final boolean readBoolean() throws IOException 从数据输入流中读取一个boolean型数据
final char readChar() throws IOException 从数据输入流中读取一个char型数据
final int readInt() throws IOException 从数据输入流中读取一个int型数据
final long readLong() throws IOException 从数据输入流中读取一个long型数据
final float readFloat() throws IOException 从数据输入流中读取一个float型数据
final double readDouble() throws IOException 从数据输入流中读取一个double型数据

十三、DataOutputStream类
DataOutputStream类可以输出任何类型的数据，同样也需要配合其他字节输出流一起使用；
DataOutputStream类的构造方法如下：
DataOutputStream(OutputStream out) 利用其它的字节输出流创建数据输出流对象
//将文件输出流包装成数据输出流，以便往文件中写入各种类型的数据
FileOutputStream fos = new FileOutputStream("data.dat");
DataOutputStream dos = new DataOutputStream(fos);

2、DataOutputStream类的常用方法
final void writeBoolean(boolean v) throws IOException 往数据输出流中写入一个boolean型数据
final void writeChar(char v) throws IOException 往数据输出流中写入一个char型数据
final void writeInt(int v) throws IOException 往数据输出流中写入一个int型数据
final void writeLong(long v) throws IOException 往数据输出流中写入一个long型数据
final void writeFloat(float v) throws IOException 往数据输出流中写入一个float型数据
final void writeDouble(double v) throws IOException 往数据输出流中写入一个double型数据
