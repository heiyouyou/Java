一、UDP网络通信
类 DatagramSocket和 DatagramPacket实现了基于 UDP协议网络程序。
UDP数据报通过数据报套接字 DatagramSocket发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。
DatagramPacket对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。
UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接
UDP协议：
	1.将数据、源、目的封装成数据包，不需要建立连接
	2.每个数据报的大小限制在64K内
	3.因无需连接，故是不可靠的
	4.发送数据结束时无需释放资源，速度快
	
二、UDP网络通信流 程
1.通过DatagramSocket类与DatagramPacket类创建对应的数据报对象来发送、接收数据和数据包对象来打包、获取数据
2.建立发送端，接收端
3.建立数据包
4.调用Socket的发送、接收方法
5.关闭Socket
6.发送端与接收端是两个独立的运行程序

三、DatagramSocke类的常用构造函数和方法
此类表示用来发送和接收数据报包的套接字
1）构造函数：
1、DatagramSocket()构造数据报套接字并将其绑定到本地主机上任何可用的端口。
2、DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。
2）常用方法：
1、void send(DatagramPacket p)从此套接字发送数据报包。
2、void receive(DatagramPacket p)从此套接字接收数据报包。 
3、void close()关闭此数据报套接字。 与TCP/IP协议通信不同的是：无异常抛出

四、DatagramPacket类的常用构造函数和方法
1）构造函数：
1、DatagramPacket(byte[] buf, int length, InetAddress address, int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。
2、DatagramPacket(byte[] buf, int length)构造 DatagramPacket，用来接收长度为length的数据包。
2）常用方法：
1、byte[] getData()返回数据缓冲区，用来获取数据报包中的数据信息
2、int getLength()返回将要发送或接收到的数据的长度。 
3、InetAddress getAddress()返回某台机器的IP地址，此数据报将要发往该机器或者是从该机器接收到的。 
4、int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。

五、URL编程
为了表示URL，java.net中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象：
类URL的构造方法都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。
1、public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例如：URL url = new URL ("http://www.tanzhouedu.com/"); 
2、public URL(URL context, String spec)：通过基 URL和相对 URL构造一个 URL对象。例如：URL downloadUrl = new URL(url,"download.html")
3、public URL(String protocol, String host, String file);根据指定的 protocol名称、host名称和 file名称创建 URL。 例如：new URL("http","www.tanzhouedu.com","download.html");
4、public URL(String protocol, String host, int port, String file);根据指定 protocol、host、port 号和 file创建 URL 对象。例如:URL gamelan = new URL("http","www.tanzhouedu.com",80,"download.html");

六、URL类常用方法
一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：
1、public String getProtocol()获取该URL的协议名
2、String getAuthority()获取此URL的授权部分
3、public String getFile()获取该URL的文件名，包括？号后面，#前面的内容
4、public String getHost()获取该URL的主机名（域名）
5、public String getPort()获取该URL的给定的端口号，如果没有设置端口号，则返回 -1
6、int getDefaultPort()获取与此 URL关联协议的默认端口号。 如：http协议默认端口是80，https协议默认端口是443
7、public String getRef()获取该URL在文件中的相对位置（即是#号锚点后面的内容）
8、public String getQuery()获取该URL的查询名（即？号后面，#前面的内容）
9、InputStream openStream()打开到此URL的连接并返回一个用于从该连接读入的 InputStream。
10、URLConnection openConnection()返回一个 URLConnection对象，它表示到 URL所引用的远程对象的连接。每次调用此 URL的协议处理程序的 openConnection方法都打开一个新的连接。

七、URLConnection类
若希望输出数据，例如向服务器端的 CGI（公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，
则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。
URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL对象上通过方法 openConnection()生成对应的 URLConnection对象。
如果连接过程失败，将产生IOException. 
1）常用方法：
通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。
1、getContentLength()返回 content-length头字段的值（即是文件的大小）。此连接的 URL引用的资源的内容长度，或者如果内容长度未知，则返回 -1。
2、String getContentType()返回content-type头字段的值（即是文件的类型）。 
3、Object getContent()获取此 URL连接的内容。 
4、long getLastModified()返回 last-modified头字段的值。结果为距离格林威治标准时间 1970年 1月 1日的毫秒数。
5、long getDate()返回 date头字段的值（即是该 URL引用的资源的发送日期，或者如果为未知，则返回 0。返回的值为距离格林威治标准时间 1970 年 1 月 1 日的毫秒数。） 
6、InputStream getInputStream() 返回从此打开的连接读取的输入流。 在读取返回的输入流时，如果在数据可供读取之前达到读入超时时间，则会抛出 SocketTimeoutException。 
7、OutputStream getOutputStream()返回写入到此连接的输出流。 

九、网络编程总结
位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。
客户端－服务器是一种最常见的网络应用程序模型。
服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。
端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。
套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。
Java中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress对象表示 IP地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。
类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。
Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。
类 URL和 URLConnection提供了最高级网络应用。
URL的网络资源的位置来同一表示 Internet上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。