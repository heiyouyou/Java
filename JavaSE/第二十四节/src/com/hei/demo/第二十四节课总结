一、内部类
把一个类放在另一个类的内部定义，把这个类称之为内部类。  包含内部类的类成为为外部类。
1）内部类可以被public,private,protected,static修饰词所修饰。
2）内部类可以访问外部类的私有数据(由里向外可以访问)，但是外部类不能访问内部类。
3）成员内部类（非静态内部类，不能拥有静态成员，（成员内部类中不能定义被static修饰的成员变量和方法）。
4）静态内部类可以拥有静态和非静态的成员变量和成员方法，而且静态的成员方法只能访问静态的成员变量，如果访问的是外部类的成员，只能访问静态的成员。
5）匿名内部类不能定义构造函数，因为匿名内部类没有类名字，但是可以定义普通代码块。

二、内部类对象的创建
1）成员内部类：
通过外部类的实例创建成员内部类的对象，如：Inner inner = outer.new Inner();
2）静态内部类：
静态内部类的创建结合外部类来创建，如：Inner inner = new Inner();或者：Outer.Inner inner = new Outer.Inner();
3）匿名内部类：
接口采用匿名内部类进行实例化，不需要进行子类实现该接口来创建实例，如：HelloWorld helloWorld = new HelloWorld(){重写接口的方法...};

三、枚举类
JDK1.5之前需要自定义枚举类
JDK1.5新增的enum关键字用于定义枚举类
若枚举只有一个成员,则可以作为一种单例模式的实现方式
实现接口的枚举类：
和普通 Java类一样，枚举类可以实现一个或多个接口
若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式，则可以让每个枚举值分别来实现该方法

四、枚举类的属性
枚举类对象的属性不应允许被改动,所以应该使用 private final修饰
枚举类的使用 private final修饰的属性应该在构造器中为其赋值
若枚举类显式的定义了带参数的构造器,则在列出枚举值时也必须对应的传入参数

五、Enum枚举类
1）、必须在枚举类的第一行声明枚举类对象。
2）、枚举类和普通类的区别：
1、使用 enum定义的枚举类默认继承了 java.lang.Enum类
2、枚举类的构造器只能使用 private访问控制符
3、枚举类的所有实例必须在枚举类中显式列出(,分隔  ;结尾)，列出的实例系统会自动添加 public static final 修饰
4、JDK1.5中可以在 switch表达式中使用Enum定义的枚举类的对象作为表达式，case子句可以直接使用枚举值的名字，无需添加枚举类作为限定
5、switch语句能支持byte、short、int、char、Enum（jdk1.5）、String（jdk1.7）

六、枚举类的常用方法
1、String toString()返回枚举常量的名称，它包含在声明中。 
2、values()返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。
3、static valueOf(String str)可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常。IllegalArgumentException。
4、static valueOf(Class<T> enumType, String name)返回带指定名称的指定枚举类型的枚举常量。 
5、int ordinal()返回枚举常量的序数（它在枚举声明中的位置，其中初始常量序数为零）。 
6、int compareTo(E o)比较此枚举与指定对象的顺序大小
7、String name()返回此枚举常量的名称，在其枚举声明中对其进行声明。 
8、int hashCode()返回枚举常量的哈希码。 
9、Class<E> getDeclaringClass()返回与此枚举常量的枚举类型相对应的 Class对象。 
10、protected Object clone()抛出 CloneNotSupportedException。 枚举类不支持克隆方法clone()，因为枚举类中的实例是不可以改变的，所以该方法是不存在在枚举类中的




